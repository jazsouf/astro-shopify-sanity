/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type CollectionRule = {
  _type: "collectionRule";
  column?: string;
  relation?: string;
  condition?: string;
};

export type ProxyString = string;

export type ProductWithVariant = {
  _type: "productWithVariant";
  product?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "product";
  };
  variant?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "productVariant";
  };
};

export type PriceRange = {
  _type: "priceRange";
  minVariantPrice?: number;
  maxVariantPrice?: number;
};

export type PlaceholderString = string;

export type Option = {
  _type: "option";
  name?: string;
  values?: Array<string>;
};

export type Inventory = {
  _type: "inventory";
  isAvailable?: boolean;
  management?: string;
  policy?: string;
};

export type LinkInternal = {
  _type: "linkInternal";
  title?: string;
  reference:
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "home";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "plp";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "page";
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "product";
      };
};

export type LinkExternal = {
  _type: "linkExternal";
  title?: string;
  url: string;
  newTab?: boolean;
};

export type EditorialSection = {
  _type: "editorialSection";
  cover: Array<
    | {
        asset?: {
          _ref: string;
          _type: "reference";
          _weak?: boolean;
          [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
        };
        media?: unknown;
        hotspot?: SanityImageHotspot;
        crop?: SanityImageCrop;
        alt?: string;
        _type: "backgroundImage";
        _key: string;
      }
    | ({
        _key: string;
      } & Color)
  >;
  content?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
    listItem?: "bullet";
    markDefs?: Array<
      | {
          url: string;
          newTab?: boolean;
          _type: "linkExternal";
          _key: string;
        }
      | {
          reference:
            | {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "home";
              }
            | {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "page";
              }
            | {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "plp";
              }
            | {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "product";
              };
          _type: "linkInternal";
          _key: string;
        }
    >;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  textColor?: Color;
};

export type RichText = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "h1" | "h2" | "h3" | "h4" | "blockquote";
  listItem?: "bullet";
  markDefs?: Array<
    | {
        url: string;
        newTab?: boolean;
        _type: "linkExternal";
        _key: string;
      }
    | {
        reference:
          | {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "home";
            }
          | {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "page";
            }
          | {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "plp";
            }
          | {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "product";
            };
        _type: "linkInternal";
        _key: string;
      }
  >;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type BackgroundImage = {
  _type: "backgroundImage";
  asset?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
  };
  media?: unknown;
  hotspot?: SanityImageHotspot;
  crop?: SanityImageCrop;
  alt?: string;
};

export type ProductVariant = {
  _id: string;
  _type: "productVariant";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  titleProxy?: ProxyString;
  store?: ShopifyProductVariant;
};

export type ShopifyProductVariant = {
  _type: "shopifyProductVariant";
  createdAt?: string;
  updatedAt?: string;
  status: "active" | "archived" | "draft";
  isDeleted?: boolean;
  title?: string;
  sku?: string;
  id?: number;
  gid?: string;
  productId?: number;
  productGid?: string;
  price?: number;
  compareAtPrice?: number;
  inventory?: Inventory;
  option1?: string;
  option2?: string;
  option3?: string;
  previewImageUrl?: string;
};

export type Collection = {
  _id: string;
  _type: "collection";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  hidden?: string;
  titleProxy?: ProxyString;
  slugProxy?: ProxyString;
  pageBuilder?: Array<
    {
      _key: string;
    } & EditorialSection
  >;
  store?: ShopifyCollection;
};

export type ShopifyCollection = {
  _type: "shopifyCollection";
  createdAt?: string;
  updatedAt?: string;
  isDeleted?: boolean;
  title?: string;
  id?: number;
  gid?: string;
  slug?: Slug;
  descriptionHtml?: string;
  imageUrl?: string;
  rules?: Array<
    {
      _key: string;
    } & CollectionRule
  >;
  disjunctive?: boolean;
  sortOrder?: string;
};

export type Home = {
  _id: string;
  _type: "home";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  pageBuilder?: Array<
    {
      _key: string;
    } & EditorialSection
  >;
  pageSeo?: PageSeo;
};

export type Page = {
  _id: string;
  _type: "page";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name: string;
  slug: Slug;
  pageBuilder?: Array<
    {
      _key: string;
    } & EditorialSection
  >;
  pageSeo?: PageSeo;
};

export type Product = {
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  titleProxy?: ProxyString;
  slugProxy?: ProxyString;
  pageBuilder?: Array<
    {
      _key: string;
    } & EditorialSection
  >;
  store?: ShopifyProduct;
};

export type ShopifyProduct = {
  _type: "shopifyProduct";
  createdAt?: string;
  updatedAt?: string;
  status?: "active" | "archived" | "draft";
  isDeleted?: boolean;
  title?: string;
  id?: number;
  gid?: string;
  slug?: Slug;
  descriptionHtml?: string;
  productType?: string;
  vendor?: string;
  collections?: string;
  tags?: string;
  priceRange?: PriceRange;
  previewImageUrl?: string;
  options?: Array<
    {
      _key: string;
    } & Option
  >;
};

export type Plp = {
  _id: string;
  _type: "plp";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  pageSeo?: PageSeo;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type PageSeo = {
  _type: "pageSeo";
  title?: PlaceholderString;
  description?: string;
  ogImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type Settings = {
  _id: string;
  _type: "settings";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  header: Header;
  footer: Footer;
  metadataBase: string;
};

export type Footer = {
  _type: "footer";
  links?: Array<
    | ({
        _key: string;
      } & LinkInternal)
    | ({
        _key: string;
      } & LinkExternal)
  >;
};

export type Header = {
  _type: "header";
  links?: Array<
    | ({
        _key: string;
      } & LinkInternal)
    | ({
        _key: string;
      } & LinkExternal)
  >;
};

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityFileAsset
  | Geopoint
  | CollectionRule
  | ProxyString
  | ProductWithVariant
  | PriceRange
  | PlaceholderString
  | Option
  | Inventory
  | LinkInternal
  | LinkExternal
  | EditorialSection
  | RichText
  | BackgroundImage
  | ProductVariant
  | ShopifyProductVariant
  | Collection
  | ShopifyCollection
  | Home
  | Page
  | Product
  | ShopifyProduct
  | Plp
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | PageSeo
  | Slug
  | Settings
  | Footer
  | Header
  | Color
  | RgbaColor
  | HsvaColor
  | HslaColor;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/data/sanity/groq.ts
// Variable: SETTINGS_QUERY
// Query: *[_type == "settings"][0]{    _type,    _id,    _updatedAt,    _createdAt,    "title": coalesce(title, "Untitled Store"),    metadataBase,    header{      _type,      announcementBar{        _type,        content,        "link": links[0]{  _type,  _key,  linkType,  "url": select(    linkType == 'href' => href,    linkType == 'home' => '/',    linkType == 'plp' => '/products',    linkType == 'page' => '/' + page->slug.current,    linkType == 'product' => '/products/' + product->store.slug.current,    linkType == 'collection' => '/collections/' + collection->store.slug.current,  ),  "label": select(      label.length > 0 => label,      linkType == 'home' => 'Home',      linkType == 'plp' => 'All Products',      linkType == 'page' => page->name,      linkType == 'product' => product->store.title,      linkType == 'collection' => collection->store.title,      "Link"    ),  openInNewTab}      },      "links": links[]{  _type,  _key,  linkType,  "url": select(    linkType == 'href' => href,    linkType == 'home' => '/',    linkType == 'plp' => '/products',    linkType == 'page' => '/' + page->slug.current,    linkType == 'product' => '/products/' + product->store.slug.current,    linkType == 'collection' => '/collections/' + collection->store.slug.current,  ),  "label": select(      label.length > 0 => label,      linkType == 'home' => 'Home',      linkType == 'plp' => 'All Products',      linkType == 'page' => page->name,      linkType == 'product' => product->store.title,      linkType == 'collection' => collection->store.title,      "Link"    ),  openInNewTab}    },    footer{      _type,      "links": links[]{  _type,  _key,  linkType,  "url": select(    linkType == 'href' => href,    linkType == 'home' => '/',    linkType == 'plp' => '/products',    linkType == 'page' => '/' + page->slug.current,    linkType == 'product' => '/products/' + product->store.slug.current,    linkType == 'collection' => '/collections/' + collection->store.slug.current,  ),  "label": select(      label.length > 0 => label,      linkType == 'home' => 'Home',      linkType == 'plp' => 'All Products',      linkType == 'page' => page->name,      linkType == 'product' => product->store.title,      linkType == 'collection' => collection->store.title,      "Link"    ),  openInNewTab}    },  }
export type SETTINGS_QUERYResult = {
  _type: "settings";
  _id: string;
  _updatedAt: string;
  _createdAt: string;
  title: string;
  metadataBase: string;
  header: {
    _type: "header";
    announcementBar: null;
    links: Array<
      | {
          _type: "linkExternal";
          _key: string;
          linkType: null;
          url: null;
          label: "Link";
          openInNewTab: null;
        }
      | {
          _type: "linkInternal";
          _key: string;
          linkType: null;
          url: null;
          label: "Link";
          openInNewTab: null;
        }
    > | null;
  };
  footer: {
    _type: "footer";
    links: Array<
      | {
          _type: "linkExternal";
          _key: string;
          linkType: null;
          url: null;
          label: "Link";
          openInNewTab: null;
        }
      | {
          _type: "linkInternal";
          _key: string;
          linkType: null;
          url: null;
          label: "Link";
          openInNewTab: null;
        }
    > | null;
  };
} | null;
// Variable: HOME_QUERY
// Query: *[_type == 'home' ][0]{    _type,    _id,    _updatedAt,    _createdAt,    "status": select(_id in path("drafts.**") => "draft", "published"),    "name": "Home",    "slug": "/",    "pageBuilder": pageBuilder[]{        _key,  _type,  "cover": cover[] {    _type,    "backgroundImage": select(_type == "backgroundImage" => {      asset,      crop,      hotspot,      alt,    }),    "color": select(_type == "color" => hex)  },  "content": content[]{    ...,    markDefs[]{      ...,      "url": select(      _type == 'linkInternal' => select(reference->._type == 'product' => '/products/' + reference->store.slug.current,        reference->.type == 'home' => '/',        reference->.type == 'page' => reference->.slug.current,        reference->.type == 'plp' => '/products',      ),      _type == 'linkExternal' => url,      )},    },  "textColor": coalesce(textColor.hex, 'black'),    },    pageSeo{  _type,  "title": coalesce(title, ^.name),  description,  ogImage}  }
export type HOME_QUERYResult = {
  _type: "home";
  _id: string;
  _updatedAt: string;
  _createdAt: string;
  status: "draft" | "published";
  name: "Home";
  slug: "/";
  pageBuilder: Array<{
    _key: string;
    _type: "editorialSection";
    cover: Array<
      | {
          _type: "backgroundImage";
          backgroundImage: {
            asset: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            } | null;
            crop: SanityImageCrop | null;
            hotspot: SanityImageHotspot | null;
            alt: string | null;
          };
          color: null;
        }
      | {
          _type: "color";
          backgroundImage: null;
          color: string | null;
        }
    >;
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet";
      markDefs: Array<
        | {
            url: string;
            newTab?: boolean;
            _type: "linkExternal";
            _key: string;
          }
        | {
            reference:
              | {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "home";
                }
              | {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "page";
                }
              | {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "plp";
                }
              | {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "product";
                };
            _type: "linkInternal";
            _key: string;
            url: string | null;
          }
      > | null;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    textColor: string | "black";
  }> | null;
  pageSeo: {
    _type: "pageSeo";
    title: PlaceholderString | null;
    description: string | null;
    ogImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
} | null;
// Variable: MODULAR_PAGE_QUERY
// Query: *[_type == 'page' && slug.current == $slug][0]{    _type,    _id,    _updatedAt,    _createdAt,    "status": select(_id in path("drafts.**") => "draft", "published"),    "name": coalesce(name, "Untitled Page"),    "slug": slug.current,    "pageBuilder": pageBuilder[]{        _key,  _type,  "cover": cover[] {    _type,    "backgroundImage": select(_type == "backgroundImage" => {      asset,      crop,      hotspot,      alt,    }),    "color": select(_type == "color" => hex)  },  "content": content[]{    ...,    markDefs[]{      ...,      "url": select(      _type == 'linkInternal' => select(reference->._type == 'product' => '/products/' + reference->store.slug.current,        reference->.type == 'home' => '/',        reference->.type == 'page' => reference->.slug.current,        reference->.type == 'plp' => '/products',      ),      _type == 'linkExternal' => url,      )},    },  "textColor": coalesce(textColor.hex, 'black'),    },    pageSeo{  _type,  "title": coalesce(title, ^.name),  description,  ogImage}  }
export type MODULAR_PAGE_QUERYResult = {
  _type: "page";
  _id: string;
  _updatedAt: string;
  _createdAt: string;
  status: "draft" | "published";
  name: string;
  slug: string;
  pageBuilder: Array<{
    _key: string;
    _type: "editorialSection";
    cover: Array<
      | {
          _type: "backgroundImage";
          backgroundImage: {
            asset: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            } | null;
            crop: SanityImageCrop | null;
            hotspot: SanityImageHotspot | null;
            alt: string | null;
          };
          color: null;
        }
      | {
          _type: "color";
          backgroundImage: null;
          color: string | null;
        }
    >;
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet";
      markDefs: Array<
        | {
            url: string;
            newTab?: boolean;
            _type: "linkExternal";
            _key: string;
          }
        | {
            reference:
              | {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "home";
                }
              | {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "page";
                }
              | {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "plp";
                }
              | {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "product";
                };
            _type: "linkInternal";
            _key: string;
            url: string | null;
          }
      > | null;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    textColor: string | "black";
  }> | null;
  pageSeo: {
    _type: "pageSeo";
    title: PlaceholderString | string;
    description: string | null;
    ogImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    } | null;
  } | null;
} | null;
// Variable: COLLECTION_QUERY
// Query: *[_type == 'collection' && slug.current == $slug][0]{    _type,    _id,    _updatedAt,    _createdAt,    "status": select(_id in path("drafts.**") => "draft", "published"),    "name": coalesce(name, "Untitled Collection"),    "slug": slug.current,    "editorial": {      "_type":'page',      _id,      _updatedAt,      _createdAt,      "status": select(_id in path("drafts.**") => "draft", "published"),      "name": coalesce(name, "Untitled Page"),      "slug": store.slug.current,      pageBuilder[]{          _key,  _type,  "cover": cover[] {    _type,    "backgroundImage": select(_type == "backgroundImage" => {      asset,      crop,      hotspot,      alt,    }),    "color": select(_type == "color" => hex)  },  "content": content[]{    ...,    markDefs[]{      ...,      "url": select(      _type == 'linkInternal' => select(reference->._type == 'product' => '/products/' + reference->store.slug.current,        reference->.type == 'home' => '/',        reference->.type == 'page' => reference->.slug.current,        reference->.type == 'plp' => '/products',      ),      _type == 'linkExternal' => url,      )},    },  "textColor": coalesce(textColor.hex, 'black'),      },    },    pageSeo{  _type,  "title": coalesce(title, ^.name),  description,  ogImage}  }
export type COLLECTION_QUERYResult = {
  _type: "collection";
  _id: string;
  _updatedAt: string;
  _createdAt: string;
  status: "draft" | "published";
  name: "Untitled Collection";
  slug: null;
  editorial: {
    _type: "page";
    _id: string;
    _updatedAt: string;
    _createdAt: string;
    status: "draft" | "published";
    name: "Untitled Page";
    slug: string | null;
    pageBuilder: Array<{
      _key: string;
      _type: "editorialSection";
      cover: Array<
        | {
            _type: "backgroundImage";
            backgroundImage: {
              asset: {
                _ref: string;
                _type: "reference";
                _weak?: boolean;
                [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
              } | null;
              crop: SanityImageCrop | null;
              hotspot: SanityImageHotspot | null;
              alt: string | null;
            };
            color: null;
          }
        | {
            _type: "color";
            backgroundImage: null;
            color: string | null;
          }
      >;
      content: Array<{
        children?: Array<{
          marks?: Array<string>;
          text?: string;
          _type: "span";
          _key: string;
        }>;
        style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
        listItem?: "bullet";
        markDefs: Array<
          | {
              url: string;
              newTab?: boolean;
              _type: "linkExternal";
              _key: string;
            }
          | {
              reference:
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "home";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "page";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "plp";
                  }
                | {
                    _ref: string;
                    _type: "reference";
                    _weak?: boolean;
                    [internalGroqTypeReferenceTo]?: "product";
                  };
              _type: "linkInternal";
              _key: string;
              url: string | null;
            }
        > | null;
        level?: number;
        _type: "block";
        _key: string;
      }> | null;
      textColor: string | "black";
    }> | null;
  };
  pageSeo: null;
} | null;
// Variable: ALL_COLLECTIONS_QUERY
// Query: *[_type == "collection" && defined(store.slug.current)] | order(date desc, _updatedAt desc) {    ...,  }
export type ALL_COLLECTIONS_QUERYResult = Array<{
  _id: string;
  _type: "collection";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  hidden?: string;
  titleProxy?: ProxyString;
  slugProxy?: ProxyString;
  pageBuilder?: Array<
    {
      _key: string;
    } & EditorialSection
  >;
  store?: ShopifyCollection;
}>;
// Variable: ALL_PRODUCTS_QUERY
// Query: *[_type == "product" && defined(store.slug.current)] | order(date desc, _updatedAt desc) {    ...,  }
export type ALL_PRODUCTS_QUERYResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  titleProxy?: ProxyString;
  slugProxy?: ProxyString;
  pageBuilder?: Array<
    {
      _key: string;
    } & EditorialSection
  >;
  store?: ShopifyProduct;
}>;
// Variable: MORE_PRODUCTS_QUERY
// Query: *[_type == "product" && _id != $skip && defined(store.slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {    ...,  }
export type MORE_PRODUCTS_QUERYResult = Array<{
  _id: string;
  _type: "product";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  titleProxy?: ProxyString;
  slugProxy?: ProxyString;
  pageBuilder?: Array<
    {
      _key: string;
    } & EditorialSection
  >;
  store?: ShopifyProduct;
}>;
// Variable: PRODUCT_QUERY
// Query: *[_type == "product" && store.slug.current == $slug] [0] {    _type,    _id,    _updatedAt,    _createdAt,    "status": select(_id in path("drafts.**") => "draft", "published"),    "name": coalesce(name, "Untitled Page"),    "slug": store.slug.current,    pageBuilder[]{        _key,  _type,  "cover": cover[] {    _type,    "backgroundImage": select(_type == "backgroundImage" => {      asset,      crop,      hotspot,      alt,    }),    "color": select(_type == "color" => hex)  },  "content": content[]{    ...,    markDefs[]{      ...,      "url": select(      _type == 'linkInternal' => select(reference->._type == 'product' => '/products/' + reference->store.slug.current,        reference->.type == 'home' => '/',        reference->.type == 'page' => reference->.slug.current,        reference->.type == 'plp' => '/products',      ),      _type == 'linkExternal' => url,      )},    },  "textColor": coalesce(textColor.hex, 'black'),    },    pageSeo{  _type,  "title": coalesce(title, ^.name),  description,  ogImage}  }
export type PRODUCT_QUERYResult = {
  _type: "product";
  _id: string;
  _updatedAt: string;
  _createdAt: string;
  status: "draft" | "published";
  name: "Untitled Page";
  slug: string | null;
  pageBuilder: Array<{
    _key: string;
    _type: "editorialSection";
    cover: Array<
      | {
          _type: "backgroundImage";
          backgroundImage: {
            asset: {
              _ref: string;
              _type: "reference";
              _weak?: boolean;
              [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
            } | null;
            crop: SanityImageCrop | null;
            hotspot: SanityImageHotspot | null;
            alt: string | null;
          };
          color: null;
        }
      | {
          _type: "color";
          backgroundImage: null;
          color: string | null;
        }
    >;
    content: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "normal";
      listItem?: "bullet";
      markDefs: Array<
        | {
            url: string;
            newTab?: boolean;
            _type: "linkExternal";
            _key: string;
          }
        | {
            reference:
              | {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "home";
                }
              | {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "page";
                }
              | {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "plp";
                }
              | {
                  _ref: string;
                  _type: "reference";
                  _weak?: boolean;
                  [internalGroqTypeReferenceTo]?: "product";
                };
            _type: "linkInternal";
            _key: string;
            url: string | null;
          }
      > | null;
      level?: number;
      _type: "block";
      _key: string;
    }> | null;
    textColor: string | "black";
  }> | null;
  pageSeo: null;
} | null;
// Variable: PRODUCT_METADATA_QUERY
// Query: *[_type == "product" && store.slug.current == $slug] [0] {    _type,    _id,    store  }
export type PRODUCT_METADATA_QUERYResult = {
  _type: "product";
  _id: string;
  store: ShopifyProduct | null;
} | null;
// Variable: ALL_PRODUCT_PAGES_SLUGS
// Query: *[_type == "product" && defined(store.slug.current)]  {"slug": store.slug.current}
export type ALL_PRODUCT_PAGES_SLUGSResult = Array<{
  slug: string | null;
}>;
// Variable: ALL_PAGES_SLUGS
// Query: *[_type == "page" && defined(slug.current)]  {"slug": slug.current}
export type ALL_PAGES_SLUGSResult = Array<{
  slug: string;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n  *[_type == \"settings\"][0]{\n    _type,\n    _id,\n    _updatedAt,\n    _createdAt,\n    \"title\": coalesce(title, \"Untitled Store\"),\n    metadataBase,\n    header{\n      _type,\n      announcementBar{\n        _type,\n        content,\n        \"link\": links[0]{\n  _type,\n  _key,\n  linkType,\n  \"url\": select(\n    linkType == 'href' => href,\n    linkType == 'home' => '/',\n    linkType == 'plp' => '/products',\n    linkType == 'page' => '/' + page->slug.current,\n    linkType == 'product' => '/products/' + product->store.slug.current,\n    linkType == 'collection' => '/collections/' + collection->store.slug.current,\n  ),\n  \"label\": select(\n      label.length > 0 => label,\n      linkType == 'home' => 'Home',\n      linkType == 'plp' => 'All Products',\n      linkType == 'page' => page->name,\n      linkType == 'product' => product->store.title,\n      linkType == 'collection' => collection->store.title,\n      \"Link\"\n    ),\n  openInNewTab\n}\n      },\n      \"links\": links[]{\n  _type,\n  _key,\n  linkType,\n  \"url\": select(\n    linkType == 'href' => href,\n    linkType == 'home' => '/',\n    linkType == 'plp' => '/products',\n    linkType == 'page' => '/' + page->slug.current,\n    linkType == 'product' => '/products/' + product->store.slug.current,\n    linkType == 'collection' => '/collections/' + collection->store.slug.current,\n  ),\n  \"label\": select(\n      label.length > 0 => label,\n      linkType == 'home' => 'Home',\n      linkType == 'plp' => 'All Products',\n      linkType == 'page' => page->name,\n      linkType == 'product' => product->store.title,\n      linkType == 'collection' => collection->store.title,\n      \"Link\"\n    ),\n  openInNewTab\n}\n    },\n    footer{\n      _type,\n      \"links\": links[]{\n  _type,\n  _key,\n  linkType,\n  \"url\": select(\n    linkType == 'href' => href,\n    linkType == 'home' => '/',\n    linkType == 'plp' => '/products',\n    linkType == 'page' => '/' + page->slug.current,\n    linkType == 'product' => '/products/' + product->store.slug.current,\n    linkType == 'collection' => '/collections/' + collection->store.slug.current,\n  ),\n  \"label\": select(\n      label.length > 0 => label,\n      linkType == 'home' => 'Home',\n      linkType == 'plp' => 'All Products',\n      linkType == 'page' => page->name,\n      linkType == 'product' => product->store.title,\n      linkType == 'collection' => collection->store.title,\n      \"Link\"\n    ),\n  openInNewTab\n}\n    },\n  }": SETTINGS_QUERYResult;
    '\n  *[_type == \'home\' ][0]{\n    _type,\n    _id,\n    _updatedAt,\n    _createdAt,\n    "status": select(_id in path("drafts.**") => "draft", "published"),\n    "name": "Home",\n    "slug": "/",\n    "pageBuilder": pageBuilder[]{\n      \n  _key,\n  _type,\n  "cover": cover[] {\n    _type,\n    "backgroundImage": select(_type == "backgroundImage" => {\n      asset,\n      crop,\n      hotspot,\n      alt,\n    }),\n    "color": select(_type == "color" => hex)\n  },\n  "content": content[]{\n    ...,\n    markDefs[]{\n      ...,\n      "url": select(\n      _type == \'linkInternal\' => select(reference->._type == \'product\' => \'/products/\' + reference->store.slug.current,\n        reference->.type == \'home\' => \'/\',\n        reference->.type == \'page\' => reference->.slug.current,\n        reference->.type == \'plp\' => \'/products\',\n      ),\n      _type == \'linkExternal\' => url,\n      )},\n    },\n  "textColor": coalesce(textColor.hex, \'black\'),\n\n    },\n    pageSeo{\n  _type,\n  "title": coalesce(title, ^.name),\n  description,\n  ogImage\n}\n  }\n': HOME_QUERYResult;
    '\n  *[_type == \'page\' && slug.current == $slug][0]{\n    _type,\n    _id,\n    _updatedAt,\n    _createdAt,\n    "status": select(_id in path("drafts.**") => "draft", "published"),\n    "name": coalesce(name, "Untitled Page"),\n    "slug": slug.current,\n    "pageBuilder": pageBuilder[]{\n      \n  _key,\n  _type,\n  "cover": cover[] {\n    _type,\n    "backgroundImage": select(_type == "backgroundImage" => {\n      asset,\n      crop,\n      hotspot,\n      alt,\n    }),\n    "color": select(_type == "color" => hex)\n  },\n  "content": content[]{\n    ...,\n    markDefs[]{\n      ...,\n      "url": select(\n      _type == \'linkInternal\' => select(reference->._type == \'product\' => \'/products/\' + reference->store.slug.current,\n        reference->.type == \'home\' => \'/\',\n        reference->.type == \'page\' => reference->.slug.current,\n        reference->.type == \'plp\' => \'/products\',\n      ),\n      _type == \'linkExternal\' => url,\n      )},\n    },\n  "textColor": coalesce(textColor.hex, \'black\'),\n\n    },\n    pageSeo{\n  _type,\n  "title": coalesce(title, ^.name),\n  description,\n  ogImage\n}\n  }\n': MODULAR_PAGE_QUERYResult;
    '\n  *[_type == \'collection\' && slug.current == $slug][0]{\n    _type,\n    _id,\n    _updatedAt,\n    _createdAt,\n    "status": select(_id in path("drafts.**") => "draft", "published"),\n    "name": coalesce(name, "Untitled Collection"),\n    "slug": slug.current,\n    "editorial": {\n      "_type":\'page\',\n      _id,\n      _updatedAt,\n      _createdAt,\n      "status": select(_id in path("drafts.**") => "draft", "published"),\n      "name": coalesce(name, "Untitled Page"),\n      "slug": store.slug.current,\n      pageBuilder[]{\n        \n  _key,\n  _type,\n  "cover": cover[] {\n    _type,\n    "backgroundImage": select(_type == "backgroundImage" => {\n      asset,\n      crop,\n      hotspot,\n      alt,\n    }),\n    "color": select(_type == "color" => hex)\n  },\n  "content": content[]{\n    ...,\n    markDefs[]{\n      ...,\n      "url": select(\n      _type == \'linkInternal\' => select(reference->._type == \'product\' => \'/products/\' + reference->store.slug.current,\n        reference->.type == \'home\' => \'/\',\n        reference->.type == \'page\' => reference->.slug.current,\n        reference->.type == \'plp\' => \'/products\',\n      ),\n      _type == \'linkExternal\' => url,\n      )},\n    },\n  "textColor": coalesce(textColor.hex, \'black\'),\n\n      },\n    },\n    pageSeo{\n  _type,\n  "title": coalesce(title, ^.name),\n  description,\n  ogImage\n}\n  }\n': COLLECTION_QUERYResult;
    '\n  *[_type == "collection" && defined(store.slug.current)] | order(date desc, _updatedAt desc) {\n    ...,\n  }\n': ALL_COLLECTIONS_QUERYResult;
    '\n  *[_type == "product" && defined(store.slug.current)] | order(date desc, _updatedAt desc) {\n    ...,\n  }\n': ALL_PRODUCTS_QUERYResult;
    '\n  *[_type == "product" && _id != $skip && defined(store.slug.current)] | order(date desc, _updatedAt desc) [0...$limit] {\n    ...,\n  }\n': MORE_PRODUCTS_QUERYResult;
    '\n  *[_type == "product" && store.slug.current == $slug] [0] {\n    _type,\n    _id,\n    _updatedAt,\n    _createdAt,\n    "status": select(_id in path("drafts.**") => "draft", "published"),\n    "name": coalesce(name, "Untitled Page"),\n    "slug": store.slug.current,\n    pageBuilder[]{\n      \n  _key,\n  _type,\n  "cover": cover[] {\n    _type,\n    "backgroundImage": select(_type == "backgroundImage" => {\n      asset,\n      crop,\n      hotspot,\n      alt,\n    }),\n    "color": select(_type == "color" => hex)\n  },\n  "content": content[]{\n    ...,\n    markDefs[]{\n      ...,\n      "url": select(\n      _type == \'linkInternal\' => select(reference->._type == \'product\' => \'/products/\' + reference->store.slug.current,\n        reference->.type == \'home\' => \'/\',\n        reference->.type == \'page\' => reference->.slug.current,\n        reference->.type == \'plp\' => \'/products\',\n      ),\n      _type == \'linkExternal\' => url,\n      )},\n    },\n  "textColor": coalesce(textColor.hex, \'black\'),\n\n    },\n    pageSeo{\n  _type,\n  "title": coalesce(title, ^.name),\n  description,\n  ogImage\n}\n  }\n': PRODUCT_QUERYResult;
    '\n  *[_type == "product" && store.slug.current == $slug] [0] {\n    _type,\n    _id,\n    store\n  }\n': PRODUCT_METADATA_QUERYResult;
    '\n  *[_type == "product" && defined(store.slug.current)]\n  {"slug": store.slug.current}\n': ALL_PRODUCT_PAGES_SLUGSResult;
    '\n  *[_type == "page" && defined(slug.current)]\n  {"slug": slug.current}\n': ALL_PAGES_SLUGSResult;
  }
}
